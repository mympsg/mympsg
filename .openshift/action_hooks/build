#!/bin/bash
# Script cannibalized from https://github.com/zfdang/memcached-in-openshift to
# install memcached into $OPENSHIFT_DATA_DIR

optdir="$OPENSHIFT_DATA_DIR/opt"
sassdir="$optdir/sass"

extract_archive()
{
    local destdir="$1" \
          archive="$2"

    mkdir -p "$destdir"

    echo "Extracting $archive into $destdir"
    case "$archive" in
        *.tar.*)
            tar -C "$destdir" --strip-components=1 -xaf "$archive"
            ;;

        *.zip)
            unzip -d "$destdir" "$archive"
            ;;

        *)
            echo "Unknown archive format for $archive"
            return 1
            ;;
    esac
}

install_pkg()
{
    local pkg="$1" \
          version="$2" \
          url_template="$3" \
          mode="$4"
    local builddir="$OPENSHIFT_TMP_DIR/$pkg-$version" \
          prefix="$optdir/$pkg"

    shift 4   # everything else is a custom arg

    if [ -d "$prefix" -a "$(cat "$prefix/.version")" = "$version"; then
        echo "$pkg is up to date at version $version"
        return 0
    fi

    (
        set -e        # Die on error

        echo "Cleaning up $builddir if it exists"
        rm -rf "$builddir"

        echo "Creating $builddir"
        mkdir "$builddir"

        eval "local url=$url_template"
        local archive="$pkg-$version.$suffix"

        echo "Downloading $pkg from $url to $OPENSHIFT_TMP_DIR/$archive"

        cd "$OPENSHIFT_TMP_DIR"
        curl -L -o "$archive" "$url"

        case "$mode" in
            source-archive)
                extract_archive "$builddir" "$archive"

                echo "Compiling"
                cd "$builddir"

                sh configure --prefix="$prefix" "$@"
                make -j$(grep -c ^processor /proc/cpuinfo)

                echo "Installing into $prefix"
                make install
                ;;

            binary-archive)
                extract_archive "$prefix" "$archive"
                ;;

            single-file)
                mkdir -p "$prefix"
                mv "$archive" -t "$prefix"
                ;;

            *)
                ;;
        esac
    )

    ret=$?
    if [ $ret -eq 0 ]; then
        echo "$version" > "$prefix/.version"
        echo "Successfully installed $pkg-$version"
    else
        echo "Installation of $pkg-$version failed"
    fi

    return $ret
}

install_sass()
{
    (
        export GEM_HOME="$sassdir"
        export PATH="$GEM_HOME/bin:$PATH"

        if (sass --version | grep '3\.2\.19') > /dev/null
        then
            echo sass is already installed at the correct version
        else
            echo Installing sass...
            gem install --no-ri --no-rdoc sass -v 3.2.19
            echo done.
        fi
    )
}

setup_ynr_config()
{
    cd $OPENSHIFT_REPO_DIR
    # install local config files into the proper paths
    ln -fs ../../general.yml -t yournextrepresentative/conf/
    ln -fs ../../local_settings.py -t yournextrepresentative/mysite/

    # Generate general.yml with substitutions
    sed -e 's,@SASS_DIRECTORY@,'"$sassdir"',g' general.yml.in > general.yml
}

dump_env()
{
    local envfile="$OPENSHIFT_DATA_DIR/extra-environ"

    touch "$envfile"

    # subshell to edit in place
    (
        rm $envfile
        (
            grep -E -v '^(export )?(OPTDIR|SASSDIR|GEM_HOME|GEM_PATH)' -
            cat <<EOF
export OPTDIR='$optdir'
export SASSDIR='$sassdir'
export GEM_HOME='$sassdir'
export GEM_PATH=''
EOF
        ) > $envfile
    ) < $envfile
}

install_pkg \
    yuicompressor \
    2.4.8 \
    'https://github.com/yui/$pkg/releases/download/v$version/$pkg-$version.jar' \
    single-file
install_sass

setup_ynr_config
dump_env
